//@+leo-ver=4-thin
//@+node:costa.20130308230300.1983:@shadow plugin_test.js
//@@language javascript
//@@tabwidth -2
//@+others
//@+node:costa.20130308230300.1987:plugin_test declarations
var path = require("path");

//@-node:costa.20130308230300.1987:plugin_test declarations
//@+node:costa.20130308230300.1988:function
describe('Plugin', function() {
  var startingDir = process.cwd();
  var jbPresentDir = path.join(startingDir, 'test/jade-brunch/present');
  var defAsset = "app/assets";

  //@  @+others
  //@+node:costa.20130308230300.1990:should be an object
  it('should be an object', function() {
    var newPath = jbPresentDir;
    process.chdir(newPath);
    var plugin = new Plugin({});
    expect(plugin).to.be.ok;
  });
  //@nonl
  //@-node:costa.20130308230300.1990:should be an object
  //@+node:costa.20130308230300.1991:should has #onCompile method
  it('should has #onCompile method', function() {
    var npath = jbPresentDir;
    process.chdir(npath);
    var plugin = new Plugin({});
    expect(plugin.onCompile).to.be.an.instanceof(Function);
  });
  //@nonl
  //@-node:costa.20130308230300.1991:should has #onCompile method
  //@+node:costa.20130308230300.1992:isFileToCompile method
  describe("isFileToCompile method", function() {
    //@  @+others
    //@+node:costa.20130308230300.1995:should manage each .jade file by default
    it("should manage each .jade file by default", function() {
      var npath = jbPresentDir;
      process.chdir(npath);
      var plugin = new Plugin({});
      expect(plugin.isFileToCompile("app/foo.jade")).to.be.ok;
    });
    //@nonl
    //@-node:costa.20130308230300.1995:should manage each .jade file by default
    //@+node:costa.20130308230300.1996:should manage the file with the extension specified by config
    it("should manage the file with the extension specified by config", function() {
      var npath = jbPresentDir;
      process.chdir(npath);
      var plugin = new Plugin({
        plugins: {
          static_jade: {
            extension: ".static.jade"
            }
        }
      });

      expect(plugin.isFileToCompile("app/foo.jade")).to.not.be.ok;
      expect(plugin.isFileToCompile("app/foo.static.jade")).to.be.ok;
    });
    //@nonl
    //@-node:costa.20130308230300.1996:should manage the file with the extension specified by config
    //@+node:costa.20130308230300.1997:should manage the file within the directories specified by regexp
    it("should manage the file within the directories specified" +
      " by the regexp in plugins.static_jade.path", function() {
      var npath = jbPresentDir;
      process.chdir(npath);

      var plugin = new Plugin({
        plugins: {
          static_jade: {
            path: [/app(\/|\\)foo/, /app(\/|\\)bar/]
          }
        }
      });
      expect(plugin.isFileToCompile("app/index.jade"  )).to.not.be.ok;
      expect(plugin.isFileToCompile("app/foo.jade"    )).to.not.be.ok;
      expect(plugin.isFileToCompile("app/foo/foo.jade")).to.be.ok;
      expect(plugin.isFileToCompile("app/bar/foo.jade")).to.be.ok;
    });
    //@nonl
    //@-node:costa.20130308230300.1997:should manage the file within the directories specified by regexp
    //@-others
  });
  //@nonl
  //@-node:costa.20130308230300.1992:isFileToCompile method
  //@+node:costa.20130308230300.1993:getHtmlFilePath method
  describe("getHtmlFilePath method", function() {
    //@  @+others
    //@+node:costa.20130308230300.1998:create output in the config.conventions.assets directory
    describe("create output in the config.conventions.assets directory", function(){
      //@  @+others
      //@+node:costa.20130308230300.2001:should get .html from .jade in the 'assets' dir by default
      it("should get .html from .jade in the 'assets' dir by default", function() {
        var npath = jbPresentDir;
        process.chdir(npath);
        var plugin = new Plugin({});
        expect(plugin.getHtmlFilePath("app/foo.jade",defAsset)).to.equal("app/assets/foo.html");
        expect(plugin.getHtmlFilePath("app/foo.static.jade",defAsset)).to.not.equal("app/assets/foo.html");
      });
      //@nonl
      //@-node:costa.20130308230300.2001:should get .html from .jade in the 'assets' dir by default
      //@+node:costa.20130308230300.2002:should get .html from .jade in the configured assets directory
      it("should get .html from .jade in the configured assets directory", function() {
        var npath = jbPresentDir;
        var asset = "app/fake_asset";
        process.chdir(npath);
        var plugin = new Plugin({
          plugins: {
          static_jade: {
            asset: asset
            }
          }
        });
        expect(plugin.getHtmlFilePath("app/foo.jade", asset)).to.equal("app/fake_asset/foo.html");
        expect(plugin.getHtmlFilePath("app/foo.static.jade", asset)).to.not.equal("app/assets/foo.html");
      });
      //@nonl
      //@-node:costa.20130308230300.2002:should get .html from .jade in the configured assets directory
      //@-others
    });
    //@nonl
    //@-node:costa.20130308230300.1998:create output in the config.conventions.assets directory
    //@+node:costa.20130308230300.1999:should get .html from .jade file by default
    it("should get .html from .jade file by default", function() {
      var npath = jbPresentDir;
      process.chdir(npath);
      var plugin = new Plugin({});
      expect(plugin.getHtmlFilePath("app/foo.jade",defAsset)).to.equal("app/assets/foo.html");
      expect(plugin.getHtmlFilePath("app/foo.static.jade",defAsset)).to.not.equal("app/assets/foo.html");
    });
    //@nonl
    //@-node:costa.20130308230300.1999:should get .html from .jade file by default
    //@+node:costa.20130308230300.2000:should get .html based on the extension specified in config.coffee
    it("should get .html based on the extension specified in config.coffee", function() {
      var npath = jbPresentDir;
      process.chdir(npath);
      var plugin = new Plugin({
        plugins: {
          static_jade: {
            extension: ".static.jade"
            }
        }
      });
      expect(plugin.getHtmlFilePath("app/foo.jade",defAsset)).to.not.equal("app/assets/foo.html");
      expect(plugin.getHtmlFilePath("app/foo.static.jade",defAsset)).to.equal("app/assets/foo.html");
    });
    //@nonl
    //@-node:costa.20130308230300.2000:should get .html based on the extension specified in config.coffee
    //@-others
  });
  //@nonl
  //@-node:costa.20130308230300.1993:getHtmlFilePath method
  //@+node:costa.20130308230300.1989:the configuration of the jade compiler
  describe("the configuration of the jade compiler", function(){
    describe("the convensions", function() {
    });
    describe('must be backward compatible', function(){
      it('must manage the options inside config.plugins.jade.options', function(){
      });
      it('must manage the locals inside config.plugins.jade.locals', function(){
      });
      it('must manage the options inside config.plugins.jade too, as backward', function(){
      });
    });
    describe("all the compilation options must work", function() {
      //@    << dai test di jade (jade.test.js) >>
      //@+node:costa.20130308230300.2004:<<dai test di jade (jade.test.js) >>
      var fs = require('fs');
      var generatedFiles = [
        { fname:    'test_compile.jade'
        , content:  'p foo'
        , options:  {}
        , locals:   {}
        },
        { fname:    'test_compile_locals.jade'
        , content:  'p= foo'
        , options:  {}
        , locals:   {foo: 'bar'}
        },
        { fname:    'test_compile_no_debug.jade'
        , content:  'p foo\np #{bar}'
        , options:  {compileDebug: false}
        , locals:   {bar: 'baz'}
        },
        { fname:    'test_compile_no_debug_global_helpers.jade'
        , content:  'p foo\np #{bar}'
        , options:  {compileDebug: false, helpers: 'global'}
        , locals:   {bar: 'baz'}
        }
      ];

      function deleteFile(path,done) {
        fs.exists(path, function(exists) {
          if(exists)
            fs.unlink(path, done(err));
          else
            done();
        });
      }

      function writeFile(idx,done) {
        fs.writeFile( generatedFiles[idx][0], generatedFiles[idx][1], function(err) {
          if(err) done(err);
        });
      }

      beforeEach( function(done) {
       forEach( f in generatedFiles ) 
        deleteFile(f[0], done);
      });

      it('should support .compile()', function(done){
        var idx = 0;
        var jadeContent = generatedFiles[idx][1];
        var fn = jade.compile(jadeContent);
        
        writeFile(idx,done);
        assert.equal('<p>foo</p>', fn());
      });

      it('should support .compile() locals', function(){
        var fn = jade.compile('p= foo');
        assert.equal('<p>bar</p>', fn({ foo: 'bar' }));
      });

      it('should support .compile() no debug', function(){
        var fn = jade.compile('p foo\np #{bar}', {compileDebug: false});
        assert.equal('<p>foo</p><p>baz</p>', fn({bar: 'baz'}));
      });

      it('should support .compile() no debug and global helpers', function(){
        var fn = jade.compile('p foo\np #{bar}', {compileDebug: false, helpers: 'global'});
        assert.equal('<p>foo</p><p>baz</p>', fn({bar: 'baz'}));
      });
      //@nonl
      //@-node:costa.20130308230300.2004:<<dai test di jade (jade.test.js) >>
      //@nl
    });
  });

  //@-node:costa.20130308230300.1989:the configuration of the jade compiler
  //@+node:costa.20130308230300.2003:do not outputs tokens and function body generated by default
  it('do not outputs tokens and function body generated by default', function(){
    
  });
  //@nonl
  //@-node:costa.20130308230300.2003:do not outputs tokens and function body generated by default
  //@-others
}
//@nonl
//@-node:costa.20130308230300.1988:function
//@-others
);
//@-node:costa.20130308230300.1983:@shadow plugin_test.js
//@-leo
